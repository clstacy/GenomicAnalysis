---
title: "Getting Started in R and RStudio"
author: Jeffrey Lewis & Carson Stacy
date: "`r Sys.Date()`"
format: 
  html: 
    code-fold: show
  pdf: default
  docx: default
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache=FALSE)
```

## Exercise Description

This activity is intended to familiarize you with using R and RStudio to analyze genomic data

## Learning Outcomes

At the end of this exercise, you should be able to:

-   Open, modify, and knit a code document file to a pdf/html output
-   Relate Quarto code documents to a traditional lab notebook
-   Run R commands in a Quarto file

## Using R and RStudio

This is a Quarto document. It uses a simple formatting syntax called markdown for authoring HTML, PDF, and MS Word documents. For more details on using Quarto, see <https://quarto.org>.

Think of this type of document as an electronic lab notebook for your data analysis.

When you click the **knit** button, a document will be generated that includes both content as well as the output of code chunks within the document. You can embed an R code chunk like this:

```{r}
# preform basic calculations
2+2

# print a statement usint the print() function
print("R code in a .qmd code chunk works just like a script")
```

## R packages

Packages are collections of functions that extend the capabilities of R. Packages have to be downloaded and installed before they can be used.

We can install and load packages using the following commands.

```{r, eval = F}
# Install a package
install.packages("pak")
```

```{r}
# Load the package
library(pak)
```

We can load a package so we can use any functions it contains. Packages only need to be installed once, but they need to be loaded every time you start a new R session.

The `pak` package is a package management tool that makes it easier to install and load packages. The `pak` function from the `pak` package is a more modern way to install packages if they aren't already installed and up to date.

We will use some packages below and later in this course, so let's make sure you have them installed now.

```{r, eval = F}
# install readr and dplyr packages
pak("readr", "dplyr")
```

## Working with Genomic Data

R is a powerful tool for analyzing genomic data. Let's download a genomic data file from GitHub for us to work with today.

Now, we can download the data file and load it into R.

```{r}
#  access-data-01
# assign url to a variable
DE_data_url <- "https://raw.githubusercontent.com/clstacy/GenomicAnalysis/main/Data/Msn24_EtOH/DE_genes_Msn24_EtOH.txt"
```

One way we will load the file is using a GUI built into RStudio. - Copy the url above (without the quotation marks). - Click on the "Import Dataset" button in the Environment tab of RStudio. - Select "From Text (readr)" - Paste the url into the "File" field at the top of the window. - Click "update" for the file to be retrieved. - Choose "Tab" as the delimiter. - If things look good in the preview, click "Import" and the data will be loaded into RStudio.

Another way to load the data is using code, which is more reproducible. This function reads a tab-separated file into R.

```{r}
# load the readr package
library(readr)

# load in the file and save it as an object
DE_results_msn24_EtOH = read_tsv(DE_data_url)
```

Note that this function uses the package `readr` (a part of the tidyverse package we loaded above). If you don't have that package (1) installed and (2) loaded into your script, it won't work.

## Working with data in R

There are many rows and columns. We can use the `glimpse()` function from the `dplyr` package to get a better idea of what the data looks like.

```{r}
# load a very common processing package
library(dplyr)

# glimpse() function shows how the data is structured
glimpse(DE_results_msn24_EtOH)
```

We see in the output there are `r nrow(DE_results_msn24_EtOH)` rows and `r ncol(DE_results_msn24_EtOH)` columns in the data. The same information should be available in the environment panel of RStudio

## Looking at Data in RStudio

If we want to take a closer look at the data, we have a few options. To see just the first few lines we can run the following command:

```{r}
head(DE_results_msn24_EtOH)
```

This can be difficult to look at. For looking at data similar to an Excel file, RStudio allows this by clicking on the name of the data.frame in the top right corner of the IDE. We can also view a file by typing `View(filename)`. To open the data in a new window, click the "pop out" button next to "filter" just above the opened dataset.

## Exploring the data

This dataset includes the log fold changes of gene expression in an experiment testing the ethanol stress response for the YPS606 strain of *S. cerevisiae* and an *msn2/4ΔΔ* mutant. There are also additional columns of metadata about each gene. In later classes, we will cover the details included, but we can already start answering questions.

**Using RStudio, answer the following questions:**

1.  How many genes are included in this study?

2.  Which gene has the highest log fold change in the *msn2/4ΔΔ* mutant EtOH response?

3.  How many HSP genes are differentially expressed (FDR < 0.01) in unstressed conditions for the mutant?

4.  Do the genes with the largest magnitude fold changes have the smallest p-values?

5.  Which isoform of phosphoglucomutase is upregulated in response to ethanol stress, PGM1 or PGM2? Do you think *msn2/4* is responsible for this difference?

**Render this file into a pdf or html file once you're finished.** If an error occurs, that will let you know there is any issue that needs to be resolved.

System information for reproducibility:

```{r}
pander::pander(sessionInfo())
```
