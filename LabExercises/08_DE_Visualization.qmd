---
title: "Visualizaing Differential Expression "
author: "Carson Stacy & Jeffrey Lewis"
date: "`r Sys.Date()`"
format:
  html:
    embed-resources: true
    code-fold: show
editor: visual
execute:
  freeze: auto
  echo: true
---

last updated: `r Sys.Date()`

# Introduction

In this activity, we will see how to do visualize results of differential expression analysis on the same yeast RNA-seq data.

At the end of this exercise, you should be able to:

-   Visualize Differential Expression Results
-   Interpret MA and volcano plots

# Setup

We start by setting our seed and loading the necessary packages. We use `pak` to load libraries we will use today.

```{r}
if (!require("pak")) install.packages("pak"); library(pak)

pak(c("tidyverse", "knitr", "readr", "pander", 
      "BiocManager","dplyr", "stringr", "purrr",
      "scales", "viridis", # for ggplot
       "reactable") # for pretty tables.
  )

# We also need these packages today.
pak("DESeq2", "edgeR", "AnnotationDbi", "org.Sc.sgd.db",
       "ggrepel", "Glimma", "ggVennDiagram", "ggplot2")
```

```{r}
library(DESeq2)
library(edgeR) # contains the limma package
library(org.Sc.sgd.db)
library(tidyverse)
library(reactable)
library(ggplot2)
library(ggrepel)
library(Glimma)
library(ggVennDiagram)
```

# Data Loading and Pre-Processing

## Loading the DE Analysis Results

We load in the results of the differential expression analysis from the edgeR, DESeq2, and limma packages that we created in previous classes. We will use these results to create visualizations.

```{r compare-DEworkflows}
# load in all of the DE results for the difference of difference contrast
path_output_edgeR <- "~/Desktop/Genomic_Data_Analysis/Analysis/edgeR/yeast_topTags_edgeR.tsv"
path_output_DESeq2 <- "~/Desktop/Genomic_Data_Analysis/Analysis/DESeq2/yeast_res_DESeq2.tsv"
path_output_limma <- "~/Desktop/Genomic_Data_Analysis/Analysis/limma/yeast_topTags_limma.tsv"

## if you don't have these files, we generated them in previous lessons.
## you can remove the "#" from the lines of code below to grab them from the internet.
# path_output_edgeR <- "https://github.com/clstacy/GenomicAnalysis/raw/main/Data/Msn24_EtOH/DE_genes/edgeR/yeast_topTags_edgeR.tsv"
# path_output_DESeq2 <- "https://github.com/clstacy/GenomicAnalysis/raw/main/Data/Msn24_EtOH/DE_genes/DESeq2/yeast_res_DESeq2.tsv"
# path_output_limma <- "https://github.com/clstacy/GenomicAnalysis/raw/main/Data/Msn24_EtOH/DE_genes/limma/yeast_topTags_limma.tsv"

topTags_edgeR <- readr::read_tsv(path_output_edgeR)
topTags_DESeq2 <- readr::read_tsv(path_output_DESeq2)
topTags_limma <- readr::read_tsv(path_output_limma)
```


Process results to create lists of DE genes


# MA-plot

MA plots display a log ratio (M) vs an average (A) in order to visualize the differences between two groups. In general we would expect the expression of genes to remain consistent between conditions and so the MA plot should be similar to the shape of a trumpet with most points residing on a y intercept of 0. DESeq2, edgeR, and limma each have built in functions for creating the MA plots that we have used before, but we can also make our own to compare all 3 analyses at once:

```{r plot-MA}
#| label: plot-MA
#| fig-show: hold
#| out-width: 33.3%
#| fig.cap: "MA plots for edgeR, DESeq2, and limma"

# assign pvalue and logFC cutoffs for coloring DE genes
sig_cutoff <- 0.01
FC_label_cutoff <- 3

#plot MA for edgeR using ggplot2
topTags_edgeR %>%
  mutate(`Significant FDR` = case_when(
        FDR < sig_cutoff ~ "Yes",
        .default = "No"),
        delabel = case_when(FDR < sig_cutoff & abs(logFC) > FC_label_cutoff ~ ORF,
                             .default = NA)) %>%
  ggplot(aes(x=logCPM, y=logFC, color = `Significant FDR`, label = delabel)) + 
    geom_point(size=1) + 
    scale_y_continuous(limits=c(-5, 5), oob=squish) + 
    geom_hline(yintercept = 0, colour="darkgrey", linewidth=1, linetype="longdash") +
    labs(x="mean of normalized counts", y="log fold change") +
    # ggrepel::geom_text_repel(size = 1.5) +
    scale_color_manual(values = c("black", "red")) +
    theme_bw() + 
    ggtitle("edgeR MA plot")

#plot MA for DESeq2 using ggplot2
topTags_DESeq2 %>%
  mutate(
    `Significant FDR` = case_when(padj < sig_cutoff ~ "Yes",
                                  .default = "No"),
    delabel = case_when(
      padj < sig_cutoff & abs(log2FoldChange) > FC_label_cutoff ~ ORF,
      .default = NA)
  ) %>% 
  ggplot(aes(log(baseMean), log2FoldChange, color = `Significant FDR`, label = delabel)) +
    geom_point(size=1) + 
    scale_y_continuous(limits=c(-5, 5), oob=squish) + 
    geom_hline(yintercept = 0, colour="darkgrey", linewidth=1, linetype="longdash") +
    labs(x="mean of normalized counts", y="log fold change") +
    # ggrepel::geom_text_repel(size = 1.5) +
    scale_color_manual(values = c("black", "red")) +
    theme_bw() +
    ggtitle("DESeq2 MA plot")
  
#plot MA for limma using ggplot2
topTags_limma %>%
  mutate(
    `Significant FDR` = case_when(adj.P.Val < sig_cutoff ~ "Yes",
                                  .default = "No"),
    delabel = case_when(
      adj.P.Val < sig_cutoff & abs(logFC) > FC_label_cutoff ~ ORF,
      .default = NA)
  ) %>% 
  ggplot(aes(AveExpr, logFC, color = `Significant FDR`, label = delabel)) + 
    geom_point(size=1) + 
    scale_y_continuous(limits=c(-5, 5), oob=squish) + 
    geom_hline(yintercept = 0, colour="darkgrey", linewidth=1, linetype="longdash") +
    labs(x="mean of normalized counts", y="log fold change") + 
    # ggrepel::geom_text_repel(size = 1.5) +
    scale_color_manual(values = c("black", "red")) +
    theme_bw() + 
    ggtitle("limma MA plot")
```

# Volcano Plot

```{r}
#| label: plot-volcano
#| fig-show: hold
#| out-width: 33.3%
#| fig-width: 6
#| fig-height: 4

topTags_edgeR %>%
  mutate(`Significant FDR` = case_when(
        FDR < sig_cutoff ~ "Yes",
        .default = "No"),
        delabel = case_when(FDR < sig_cutoff & abs(logFC) > FC_label_cutoff ~ ORF,
                             .default = NA)) %>%
  ggplot(aes(x = logFC, -log10(FDR), color = `Significant FDR`, label = delabel)) +
  geom_point(size = 1) +
  ggrepel::geom_text_repel(size = 1.5) +
  labs(x = "log fold change", y = "-log10(adjusted p-value)") +
  theme_bw() +
  guides(color="none") +
  scale_color_manual(values = c("black", "red")) +
  ggtitle("edgeR Volcano plot")


topTags_DESeq2 %>%
  mutate(
    `Significant FDR` = case_when(padj < sig_cutoff ~ "Yes",
                                  .default = "No"),
    delabel = case_when(
      padj < sig_cutoff & abs(log2FoldChange) > FC_label_cutoff ~ ORF,
      .default = NA)
  ) %>% 
  ggplot(aes(log2FoldChange,-log10(padj), color = `Significant FDR`, label = delabel)) + 
    geom_point(size = 1) +
  ggrepel::geom_text_repel(size = 1.5) +
  labs(x = "log fold change", y = "-log10(adjusted p-value)") +
  theme_bw() +
  guides(color="none") +
  scale_color_manual(values = c("black", "red")) +
    ggtitle("DESeq2 Volcano plot")


topTags_limma %>%
  mutate(
    `Significant FDR` = case_when(adj.P.Val < sig_cutoff ~ "Yes",
                                  .default = "No"),
    delabel = case_when(
      adj.P.Val < sig_cutoff & abs(logFC) > FC_label_cutoff ~ ORF,
      .default = NA)
  ) %>% 
  ggplot(aes(x=logFC, y=-log10(P.Value), color = `Significant FDR`, label = delabel)) + 
  geom_point(size = 1) +
  ggrepel::geom_text_repel(size = 1.5) +
  labs(x = "log fold change", y = "-log10(UNADJUSTED p-value)") +
  theme_bw() +
  guides(color="none") +
  scale_color_manual(values = c("black", "red")) +
  ggtitle("limma Volcano plot")
```

# Using Glimma for an interactive visualization

## MA plots

The plots above used the saved output from the differential expression analysis. Some visualization tools available work directly on the r object and gene lists created during the analysis. To use these data, let's load those r objects (.Rds file format).

We pull the data from github here, but you can also load it from your local machine by uncommenting the code below and commenting out the github code.


```{r}
# load in res objects for both limma and edgeR
res_limma <- readr::read_rds("https://github.com/clstacy/GenomicAnalysis/raw/main/Data/Msn24_EtOH/DE_genes/limma/yeast_res_limma.Rds")
res_edgeR <- readr::read_rds("https://github.com/clstacy/GenomicAnalysis/raw/main/Data/Msn24_EtOH/DE_genes/edgeR/yeast_res_edgeR.Rds")

## alternative code to load local files
# res_limma <- readRDS("~/Desktop/Genomic_Data_Analysis/Analysis/limma/yeast_res_limma.Rds")
# res_edgeR <- readRDS("~/Desktop/Genomic_Data_Analysis/Analysis/edgeR/yeast_res_edgeR.Rds")


# load in the DGE lists for each
y_limma <- read_rds("https://github.com/clstacy/GenomicAnalysis/raw/main/Data/Msn24_EtOH/DE_genes/limma/yeast_y_limma.Rds")
y_edgeR <- read_rds("https://github.com/clstacy/GenomicAnalysis/raw/main/Data/Msn24_EtOH/DE_genes/edgeR/yeast_y_edgeR.Rds")

## again, alternative code to load local files
# y_limma <- readRDS("~/Desktop/Genomic_Data_Analysis/Analysis/limma/yeast_y_limma.Rds")
# y_edgeR <- readRDS("~/Desktop/Genomic_Data_Analysis/Analysis/edgeR/yeast_y_edgeR.Rds")


glimmaMA(res_limma, dge = y_limma)
glimmaMA(res_edgeR, dge = y_edgeR)
```

## Volcano Plots

```{r}
glimmaVolcano(res_limma, dge = y_limma)
glimmaVolcano(res_edgeR, dge = y_edgeR)
```

# Generating bar graph summaries

This visualization approach compresses relevant information, so it's generally a discouraged approach for visualizing DE data. However, it is done, so if it is useful for your study, here is how you could do it:

```{r}
# let's use the res_all object from the 07_DE_limma_DESeq2 exercise:
res_all_limma <- readr::read_rds("https://github.com/clstacy/GenomicAnalysis/raw/main/Data/Msn24_EtOH/DE_genes/limma/yeast_res_allContrasts_limma.Rds")

decideTests_all_edgeR <- readr::read_tsv('https://github.com/clstacy/GenomicAnalysis/raw/main/Data/Msn24_EtOH/DE_genes/edgeR/yeast_decideTests_allContrasts_edgeR.tsv')

res_all_limma %>%
  decideTests(p.value = 0.05, lfc = 0) %>%
  as.data.frame() %>%
  rownames_to_column("gene") %>%
  pivot_longer(-gene, names_to = "contrast", values_to = "DE_direction") %>%
  group_by(contrast) %>%
  summarise(
    upregulated = sum(DE_direction == 1),
    downregulated = sum(DE_direction == -1)
  ) %>%
  pivot_longer(-contrast, names_to = "DE_direction", values_to = "n_genes") %>%
  ggplot(aes(x = contrast, y = n_genes, fill = DE_direction)) +
  geom_col(position = "dodge") +
  theme_bw() +
  coord_flip() +
  geom_text(aes(label = n_genes),
            position = position_dodge(width = .9),
            hjust = "inward") +
  labs(y="Number of DE genes") +
  ggtitle("Summary of DE genes by contrast (limma)")

# how to do the same for edgeR
decideTests_all_edgeR %>%
  pivot_longer(-gene, names_to = "contrast", values_to = "DE_direction") %>%
  group_by(contrast) %>%
  summarise(
    upregulated = sum(DE_direction == 1),
    downregulated = sum(DE_direction == -1)
  ) %>%
  pivot_longer(-contrast, names_to = "DE_direction", values_to = "n_genes") %>%
  mutate(contrast = fct_reorder(contrast, 1/(1+n_genes))) %>%
  ggplot(aes(x = contrast, y = n_genes, fill = DE_direction)) +
  geom_col(position = "dodge") +
  theme_bw() +
  coord_flip() +
  scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
  geom_text(aes(label = n_genes),
            position = position_dodge(width = .9),
            hjust = "inward") +
  labs(y="Number of DE genes") +
  ggtitle("Summary of DE genes by contrast (edgeR)")

```

If we want to show the same amount of information, in a more informative way, a Venn diagram is often a better alternative. Here's an easy way to get that visualization if you use either edgeR or limma for your analysis.

```{r venn-allContrasts}
#| fig-height=8 
#| fig-width=10

# same as before, we can make the plot from the decideTests output
res_all_limma %>%
  decideTests(p.value = 0.01, lfc = 0) %>%
  vennDiagram(include=c("up", "down"),
              lwd=0.75,
              mar=rep(2,4), # increase margin size
              counts.col= c("red", "blue"),
              show.include=TRUE)

decideTests_all_edgeR %>%
  column_to_rownames("gene") %>%
  vennDiagram(include=c("up", "down"),
              lwd=0.75,
              mar=rep(4,4), # increase margin size
              counts.col= c("red", "blue"),
              show.include=TRUE)
```

Venn diagrams are useful for showing gene counts as well as the overlaps between contrasts. A useful GUI based web-page for creating venn diagrams includes: <https://eulerr.co/>. If you enjoy coding, it also exists as an R package (<https://cran.r-project.org/web/packages/eulerr/index.html>). If you just want gene list overlap, here's a helpful web tool: <http://www.pangloss.com/seidel/Protocols/venn.cgi>

## Questions

1.  Modify the code below to find out how many genes are upregulated (p.value \< 0.01 and \|lfc\| \> 1) in the ethanol stress response of both WT cells and msn2/4 mutants.

```{r create-your-own-Venn, fig.height=4, fig.width=12}
#| fig.height=4
#| fig.width=12

# here are all of the contrasts
colnames(res_all_limma)

# select the correct two and replace them below
res_all_limma %>%
  decideTests(p.value = 0.05, lfc = 0) %>%
  data.frame() %>%
  # change the columns selected in this select command
  dplyr::select(c("MOCK.MSN24ddvsWT", "EtOH.MSN24ddvsWT")) %>%
  vennDiagram(include="down",
              lwd=0.75,
              mar=rep(0,4), # increase margin size
              # counts.col= c("red", "blue"),
              show.include=TRUE
              )
  
```

Be sure to knit this file into a pdf or html file once you're finished.

System information for reproducibility:

```{r}
pander::pander(sessionInfo())
```
